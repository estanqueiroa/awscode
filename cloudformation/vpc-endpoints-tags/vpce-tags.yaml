# WARNING: This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Custom Resource + Lambda to Add Tags to VPC Endpoints

Parameters:


  pVPCName:
    Type: String
    Description: Input the VPC Name
    Default: private-vpc-01

  pVPCCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  pTagKey1:
    Type: String
    Description: Input the Tag Key for tagging
    Default: Createdby

  pTagValue1:
    Type: String
    Description: Input the Tag Value for tagging
    Default: CloudFormationCustomResource

  pTagKey2:
    Type: String
    Description: Input the Tag Key for tagging
    Default: CostCenter

  pTagValue2:
    Type: String
    Description: Input the Tag Value for tagging
    Default: CC12345

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "VPC configuration"
        Parameters:
          - pVPCName
          - pVPCCidr
      - Label:
          default: "Tags configuration"
        Parameters:
          - pTagKey1
          - pTagValue1
          - pTagKey2
          - pTagValue2


Resources:


#########################
# Create private VPC 
#########################

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref pVPCName
        - Key: !Ref pTagKey2
          Value: !Ref pTagValue2

  rPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!Ref pVPCCidr, 8, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1
        - Key: !Ref pTagKey2
          Value: !Ref pTagValue2

  rPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!Ref pVPCCidr, 8, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2
        - Key: !Ref pTagKey2
          Value: !Ref pTagValue2

  rPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: Private Route Table
        - Key: !Ref pTagKey2
          Value: !Ref pTagValue2

  rPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnet1
      RouteTableId: !Ref rPrivateRouteTable

  rPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnet2
      RouteTableId: !Ref rPrivateRouteTable

#########################
# Create VPC Endpoints
#########################

  rEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: "Allow all outbound traffic to VPC"
    Properties:
      GroupDescription: Security group to govern who can access the endpoints
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt rVPC.CidrBlock
          Description: Allow HTTPs access to the VPC endpoints
      SecurityGroupEgress:
        - Description: Allow all outbound traffic to VPC
          IpProtocol: "-1"
          CidrIp: !GetAtt rVPC.CidrBlock
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc-endpoints
        - Key: !Ref pTagKey2
          Value: !Ref pTagValue2

  rCloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      VpcId: !Ref rVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref rPrivateSubnet1
        - !Ref rPrivateSubnet2
      SecurityGroupIds:
        - !Ref rEndpointSecurityGroup
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

# no cost GATEWAY endpoints

  rVpcS3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref rPrivateRouteTable
      PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Deny
                  Principal: '*'
                  Action:
                    - 's3:*'
                  Resource:
                    - '*'
                  Condition:
                    StringNotEquals:
                      aws:sourceVpc: !Ref rVPC

  rVpcDynamodbGatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref rVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref rPrivateRouteTable
      PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Deny
                  Principal: '*'
                  Action:
                    - 'dynamodb:*'
                  Resource:
                    - '*'
                  Condition:
                    StringNotEquals:
                      aws:sourceVpc: !Ref rVPC


###########################
## Lambda Automation to Tag Name to VPC endpoints
###########################

  rTaggingLambdaRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Resource * acceptable for this policy."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: VPCEndpointsTagging
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:Describe*'
            - 'ec2:CreateTags'
            Resource: "*"
      Tags:
      - Key: !Ref pTagKey2
        Value: !Ref pTagValue2


  rTaggingLambda: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    # checkov:skip=CKV_AWS_116:Dead Letter Queue(DLQ) for Lambda not required
    # checkov:skip=CKV_AWS_173:No encryption required for Lambda environment variables
    # checkov:skip=CKV_AWS_115:function-level concurrent execution limit not required
    # checkov:skip=CKV_AWS_117:This lambda functions doesnt require a VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda function needed to automatically associate VPC SPoke to DNS"
          - id: W92
            reason: "There is no provision for using this function simultaneously"
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import cfnresponse
          import os

          # function to get endpoints service name suffix

          def get_service_name_suffix(service_name, endpoint_type):

            try:

              """
              Get the substring after the 3rd period in the input string. e.g. com.amazonaws.us-east-1.s3 returns "s3"
              """
              # Find the indices of all periods
              period_indices = [i for i, char in enumerate(service_name) if char == '.']
              
              # If there are less than 3 periods, return the entire input string
              if len(period_indices) < 3:
                  return service_name
              
              # Get the index of the 3rd period
              third_period_index = period_indices[2]
              
              # Get endpoint type
              if endpoint_type == 'Interface':
                vpce_type = 'if'
              else:
                vpce_type = 'gw'

              # Get the substring after the 3rd period
              str_suffix = service_name[third_period_index + 1:] + '-' + vpce_type

              return str_suffix
              
            except ClientError as err:
              err.response['Error']['Code'], err.response['Error']['Message']
              raise

          def lambda_handler(event, context):

            # enable logging
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            responseData = {}
            responseStatus = cfnresponse.FAILED
            logger.info('Received event: {}'.format(json.dumps(event)))

            # Get the request type (CREATE, UPDATE, or DELETE)
            request_type = event['RequestType']

            if request_type == 'Delete': # CFN stack DELETE event
              # do nothing
              responseStatus = cfnresponse.SUCCESS
              cfnresponse.send(event, context, responseStatus, responseData)
            
          
            if request_type == 'Create' or request_type == 'Update': # CFN stack CREATE or UPDATE event

              try:

                # Get VPC values from event

                vpc_region = event["ResourceProperties"]["VPCRegion"]
                vpc_id = event["ResourceProperties"]["VPCId"]
                vpc_name = event["ResourceProperties"]["VPCName"]

                # Get Tag values from event

                tag_key1 = event["ResourceProperties"]["TAGKEY1"]
                tag_value1 = event["ResourceProperties"]["TAGVALUE1"]
                tag_key2 = event["ResourceProperties"]["TAGKEY2"]
                tag_value2 = event["ResourceProperties"]["TAGVALUE2"]

              except Exception as e:
                logger.info('Failed to get parameters: {}'.format(e))

              try:

                # Set up the AWS client
                ec2 = boto3.client('ec2', region_name=vpc_region)

                # Get all the VPC endpoints in the VPC
                response = ec2.describe_vpc_endpoints(
                    Filters=[
                        {
                            'Name': 'vpc-id',
                            'Values': [vpc_id]
                        }
                    ]
                )

                # Iterate through the VPC endpoints and add tags
                for endpoint in response['VpcEndpoints']:
                    endpoint_id = endpoint['VpcEndpointId']
                    service_name = endpoint['ServiceName']
                    endpoint_type = endpoint['VpcEndpointType']
                    suffix = get_service_name_suffix(service_name, endpoint_type)

                    try:
                        ec2.create_tags(
                            Resources=[endpoint_id],
                            Tags=[
                                {
                                    'Key': 'Name',
                                    'Value': vpc_name + '-endpoint-' + suffix
                                },
                                {
                                    'Key': 'VpcId',
                                    'Value': vpc_id
                                },
                                {
                                    'Key': tag_key1,
                                    'Value': tag_value1
                                },
                                {
                                    'Key': tag_key2,
                                    'Value': tag_value2
                                },

                            ]
                        )
                        print(f"Tagged VPC endpoint {endpoint_id} with VPC ID {vpc_id}")

                    except Exception as e:
                        print(f"Error tagging VPC endpoint {endpoint_id}: {e}")


                responseData = {'VPCRegion': vpc_region, 'VPCId': vpc_id}
                
              except Exception as e:
                logger.info('Failed to perform tagging: {}'.format(e))

              responseStatus = cfnresponse.SUCCESS
              cfnresponse.send(event, context, responseStatus, responseData)

      FunctionName: !Sub '${AWS::StackName}-TaggingVPCEndpoints'
      Handler: "index.lambda_handler"
      MemorySize: 128
      Role: !GetAtt "rTaggingLambdaRole.Arn"
      Runtime: "python3.12"
      Architectures:
        - arm64 # graviton
      Timeout: 120 # seconds
      Tags:
      - Key: !Ref pTagKey2
        Value: !Ref pTagValue2

# custom resource to trigger Lambda function for tagging in same stack

  rVpcEndpointTagger:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: rCloudWatchLogsVPCEndpoint # wait for endpoints creation
    Properties:
      ServiceToken: !GetAtt rTaggingLambda.Arn
      VPCRegion: !Ref AWS::Region
      VPCId: !Ref rVPC
      VPCName: !Ref pVPCName
      TAGKEY1: !Ref pTagKey1
      TAGVALUE1: !Ref pTagValue1
      TAGKEY2: !Ref pTagKey2
      TAGVALUE2: !Ref pTagValue2
      ServiceTimeout: 60 # custom resource operation times out (seconds)

############################################
# custom resource to trigger Lambda function for tagging from another stack
# e.g. you are creating VPCs endpoints from another stack(s) and want to tag them using same Lambda created here
############################################

  # rTaggingVPCEndpoints:
  #   Type: AWS::CloudFormation::CustomResource
  #   DependsOn: rECSVPCEndpoint # wait for endpoints creation
  #   Properties:
  #     ServiceToken: !ImportValue eTagging-LambdaId
  #     VPCRegion: !Ref AWS::Region
  #     VPCId: !Ref rVPC
  #     VPCName: !Ref pVPCName
  #     TAGKEY1: !Ref pTagKey1
  #     TAGVALUE1: !Ref pTagValue1
  #     TAGKEY2: !Ref pTagKey2
  #     TAGVALUE2: !Ref pTagValue2
  #     ServiceTimeout: 60 # custom resource operation times out (seconds)

Outputs:

  oTaggingLambdaId:
    Description: Tagging Lambda ID
    Value: !GetAtt rTaggingLambda.Arn
    Export:
      Name: eTagging-LambdaId

  oVPC:
    Description: A reference to the created VPC
    Value: !Ref rVPC
    Export:
      Name: private-vpc

  oPrivateSubnet1:
    Description: A reference to the first private subnet
    Value: !Ref rPrivateSubnet1
    Export:
      Name: private-subnet-1

  oPrivateSubnet2:
    Description: A reference to the second private subnet
    Value: !Ref rPrivateSubnet2
    Export:
      Name: private-subnet-2
