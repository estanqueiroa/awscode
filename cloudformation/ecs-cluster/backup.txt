AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster, Service, and Task Definition with ALB

Parameters:

  ContainerImage:
    Type: String
    Default: kale5/rickroll:vclatest
    Description: The container image to use for the task definition
    AllowedValues:
    - kale5/rickroll:vclatest
    - nginx:latest

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the resources will be deployed

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnet IDs where the resources will be deployed

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-task
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: 0.5 GB
      Cpu: 256
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: app
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          HealthCheck:
            Command:
            - CMD-SHELL
            - curl -f http://localhost/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60


  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ApplicationLoadBalancer
    Properties:
      ServiceName: !Sub ${AWS::StackName}-svc
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ECSServiceSecurityGroup.GroupId
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
          #LoadBalancerName: !Ref ApplicationLoadBalancer

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      #GroupName: ECS Service Security Group
      GroupDescription: Security group for the ECS service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref Subnets

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      #GroupName: ALB Security Group
      GroupDescription: Security group for the Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: !Sub ${AWS::StackName}-targets
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'


Outputs:
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: The name of the ECS service
    Value: !Ref ECSService

  ApplicationLoadBalancerDNSName:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName