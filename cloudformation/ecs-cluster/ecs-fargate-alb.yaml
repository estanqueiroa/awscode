# WARNING: This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# Refs: https://github.com/nathanpeck/aws-cloudformation-fargate/blob/master/service-stacks/public-subnet-public-loadbalancer.yml
# https://containersonaws.com/pattern/?tool=cloudformation

AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster, Service, and Task Definition with ALB

Parameters:

  pContainerImage:
    Type: String
    Default: kale5/rickroll:vclatest
    Description: The container image to use for the task definition
    AllowedValues:
    - kale5/rickroll:vclatest
    - nginx:latest
    - nouchka/hackmyresume:latest
    - ymuski/resume

  # pPath:
  #   Type: String
  #   Default: "*"
  #   Description: A path on the public load balancer that this service should be connected to. Use * to send all load balancer traffic to this service.

  # pPriority:
  #   Type: Number
  #   Default: 1
  #   Description: The priority for the routing rule added to the load balancer. This only applies if your have multiple services which have been assigned to different paths on the load balancer.

  pVPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the resources will be deployed

  pSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnet IDs where the resources will be deployed

  pContainerPort:
    Type: String
    Description: Container TCP port
    Default: 80

  pMyIPAddress:
    Type: String
    Description: My Internet IP address in /32 format for ALB external access (use https://checkip.amazonaws.com/)
    Default: 187.151.45.33/32

  pNumberTasks:
    Type: String
    Default: 2
    ConstraintDescription: "Must be a number between 1 and 10."
    Description: "Number of tasks for ECS service when AutoScaling is disabled. Enter a number from 1 to 10."

  pAutoScalingMax:
    Type: String
    Default: 10
    ConstraintDescription: "Must be a number between 1 and 10."
    Description: "Max Number of tasks for ECS Service AutoScaling. Enter a number from 1 to 10."

  pAutoScalingMin:
    Type: String
    Default: 1
    ConstraintDescription: "Must be a number between 1 and 10."
    Description: "Min Number of tasks for ECS Service AutoScaling. Enter a number from 1 to 10."

Resources:

# create CW log group for stress testing

  rCloudWatchLogGroupStress:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/stress-test
      RetentionInDays: 14

# create CW log group for app

  rCloudWatchLogGroupApp:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/app
      RetentionInDays: 14

# create ECS cluster

  rECSCluster:
    Type: AWS::ECS::Cluster
    # checkov:skip=CKV_AWS_65:container insights not required for demo testing
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# create Task Definition

  rECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-app-task
      TaskRoleArn: !GetAtt rECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt rECSTaskExecutionRole.Arn
      Memory: 0.5 GB
      Cpu: 256
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: app
          Image: !Ref pContainerImage
          PortMappings:
            - ContainerPort: !Ref pContainerPort
              HostPort: !Ref pContainerPort
              Protocol: tcp
          HealthCheck: # remove it to not confuse ALB health check
            Command:
            - CMD-SHELL
            - curl -f http://localhost/ || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref rCloudWatchLogGroupApp
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# create ECS service

  rECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - rApplicationLoadBalancer
      #- rListenerRule
    Properties:
      ServiceName: !Sub ${AWS::StackName}-svc1
      Cluster: !Ref rECSCluster
      TaskDefinition: !Ref rECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS # rolling update (ECS) deployment type
      DesiredCount: !Ref pNumberTasks # this is overwritten by Auto Scaling settings (Min / Max Capacity)
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt rECSServiceSecurityGroup.GroupId
          Subnets: !Ref pSubnets
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref pContainerPort
          TargetGroupArn: !Ref rALBTargetGroup
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# create ECS task IAM role

  rECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# create ECS task execution IAM role

  rECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ContainerInsights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:PutTargets
                  - events:DescribeRule
                  - events:ListTargetsByRule
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                Resource: "*"
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# create Security Group for ECS service

  rECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: only internal outbound traffic is allowed
          - id: W40
            reason: only internal outbound traffic is allowed
    Properties:
      GroupDescription: Security group for the ECS service
      VpcId: !Ref pVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref rALBSecurityGroup
          FromPort: !Ref pContainerPort
          IpProtocol: tcp
          ToPort: !Ref pContainerPort
          Description: Allow ECS internal traffic
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          Description: Allow all internal traffic outbound
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# create Application Load Balancer

  rApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    # checkov:skip=CKV_AWS_131:header dropping not required for demo testing
    # checkov:skip=CKV_AWS_91:logging not required for demo testing
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W52
            reason: No logging required
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '5'
        - Key: client_keep_alive.seconds
          Value: '60'
      SecurityGroups:
        - !GetAtt rALBSecurityGroup.GroupId
      Subnets: !Ref pSubnets
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# create Security Group for ALB

  rALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: only outbound traffic is allowed
          - id: W40
            reason: only outbound traffic is allowed
    Properties:
      GroupDescription: Security group for the Application Load Balancer
      VpcId: !Ref pVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref pContainerPort
          ToPort: !Ref pContainerPort
          CidrIp: !Ref pMyIPAddress
          Description: Allow internet access to ALB
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          Description: Allow all traffic outbound from ALB
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

# # create ALB Listener

  rALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    # checkov:skip=CKV_AWS_2:SSL not required for demo testing
    # checkov:skip=CKV_AWS_103:TLS not required for demo testing
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W56
            reason: No HTTPS required, demo only
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rALBTargetGroup #!Ref rDummyTargetGroupPublic
      LoadBalancerArn: !Ref rApplicationLoadBalancer
      Port: !Ref pContainerPort
      Protocol: HTTP
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

  # # Create a rule on the load balancer for routing traffic to the target group
  # rListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - TargetGroupArn: !Ref rALBTargetGroup
  #         Type: 'forward'
  #     Conditions:
  #       - Field: path-pattern
  #         Values: [!Ref 'pPath']
  #     ListenerArn: !Ref rALBListener
  #     Priority: !Ref 'pPriority'

  # # A dummy target group is used to setup the ALB to just drop traffic
  # # initially, before any real service target groups have been added.
  # rDummyTargetGroupPublic:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckIntervalSeconds: 6
  #     HealthCheckPath: /
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-11']]
  #     Port: !Ref pContainerPort
  #     Protocol: HTTP
  #     UnhealthyThresholdCount: 2
  #     TargetType: ip
  #     VpcId: !Ref pVPC

# create Target Group for ALB

# https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-healthcheck.html


  rALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 5
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      UnhealthyThresholdCount: 3
      Name: !Sub ${AWS::StackName}-targets
      Port: !Ref pContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref pVPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-connection-draining.html
          Value: '5'
      Tags:
      - Key: Solution
        Value: !Sub ${AWS::StackName}-ecs

###############################
# ECS Auto Scaling
###############################

  rAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref pAutoScalingMax
      MinCapacity: !Ref pAutoScalingMin
      ResourceId: !Join 
        - /
        - - service
          - !Ref rECSCluster
          - !GetAtt rECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt rAutoScalingRole.Arn

  # rAutoScalingPolicyCPU:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: CPUScaling1
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref rAutoScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageCPUUtilization
  #       TargetValue: 70
  #       ScaleInCooldown: 180
  #       ScaleOutCooldown: 60

  # rAutoScalingPolicyMem:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: MemScaling1
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref rAutoScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageMemoryUtilization
  #       TargetValue: 90
  #       ScaleInCooldown: 180
  #       ScaleOutCooldown: 60

  rServiceScalingPolicyALB:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: AlbScaling1
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref rAutoScalingTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 50
          ScaleInCooldown: 180
          ScaleOutCooldown: 30
          #DisableScaleIn: true
          PredefinedMetricSpecification:
            PredefinedMetricType: ALBRequestCountPerTarget
            ResourceLabel: !Join 
              - '/' 
              - - !GetAtt rApplicationLoadBalancer.LoadBalancerFullName
                - !GetAtt rALBTargetGroup.TargetGroupFullName

  rAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSAutoscaling
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                Resource: "*"

########################
# Stress testing
########################
# To monitor the stress test:

# Go to the ECS console and find your cluster and service.
# Check the "Metrics" tab to see CPU utilization increasing.
# Watch the "Tasks" tab to see if new tasks are launched as CPU utilization increases.
# Check CloudWatch Logs for detailed output from the stress command.
#
# Amazon ECS cluster-level free metrics are only available for tasks that are hosted on an Amazon EC2 instance. 
# To view cluster-level metrics for your Fargate tasks, you can use Container Insights
# https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html

# # create Task Definition

  rECSTaskDefinitionStress:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: stress-test-task
      TaskRoleArn: !GetAtt rECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt rECSTaskExecutionRole.Arn
      Memory: '2048'  # 2 GB
      Cpu: '1024'  # 1 vCPU
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: stress-test-container
          #Image: public.ecr.aws/amazonlinux/amazonlinux:2
          Image: public.ecr.aws/amazonlinux/amazonlinux:2023
          Command: # Runs the stress command to simulate CPU load on 2 cores and memory 128MB for 1 hour (3600 seconds)
            - /bin/sh
            - -c
            - |
              yum install stress -y && \
              stress --cpu 2 --vm 1 --vm-bytes 128M --timeout 3600s
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref rCloudWatchLogGroupStress
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs


  # # create ECS service

  # rECSServiceStress:
  #   Type: AWS::ECS::Service
  #   #DependsOn: rApplicationLoadBalancer
  #   Properties:
  #     ServiceName: StressTestService
  #     Cluster: !Ref rECSCluster
  #     TaskDefinition: !Ref rECSTaskDefinitionStress
  #     DeploymentConfiguration:
  #       MaximumPercent: 200
  #       MinimumHealthyPercent: 50
  #     DesiredCount: 1
  #     LaunchType: FARGATE
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: ENABLED
  #         SecurityGroups:
  #           - !GetAtt rECSServiceSecurityGroup.GroupId
  #         Subnets: !Ref pSubnets

Outputs:
  oECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref rECSCluster

  oECSServiceName:
    Description: The name of the ECS service
    Value: !Ref rECSService

  oApplicationLoadBalancerDNSName:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt rApplicationLoadBalancer.DNSName