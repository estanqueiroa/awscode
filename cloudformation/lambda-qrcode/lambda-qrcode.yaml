# WARNING: This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# This template will implement AWS services which may have associated cost - USE AT YOUR OWN RISK :-)
################################

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless QR Code Generator. This template will set up an API Gateway, Lambda functions, DynamoDB table, and S3 bucket.'

Parameters:

  pStageName:
    Type: String
    Default: 'prod'
    Description: API Gateway stage name
 
  pQRCodeLayerArn:
    Type: String
    Description: ARN of your Lambda Layer created for QRCode (see README)
    Default: 'arn:aws:lambda:region:accountid:layer:qrcode-layer:1'

Resources:

  # S3 Bucket for QR Code Images
  rQRCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      #BucketName: !Sub ${AWS::StackName}-qrcodes
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3000
      Tags:
        - Key: Project-CFN
          Value: !Sub '${AWS::StackName}-stack'

  # DynamoDB Table for metadata
  rQRCodeMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-metadata
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Project-CFN
          Value: !Sub '${AWS::StackName}-stack'

  # Lambda Role
  rLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: QRCodeGeneratorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${rQRCodeBucket.Arn}/*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt rQRCodeMetadataTable.Arn
      Tags:
        - Key: Project-CFN
          Value: !Sub '${AWS::StackName}-stack'

  # Lambda Function
  rQRCodeGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt rLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
          const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
          const { DynamoDBDocumentClient, PutCommand } = require('@aws-sdk/lib-dynamodb');
          const QRCode = require('/opt/nodejs/node_modules/qrcode');

          const s3Client = new S3Client();
          const ddbClient = new DynamoDBClient();
          const ddbDocClient = DynamoDBDocumentClient.from(ddbClient);

          exports.handler = async (event) => {
            try {
              const url = JSON.parse(event.body).url;
              if (!url) {
                return {
                  statusCode: 400,
                  body: JSON.stringify({ error: 'URL is required' })
                };
              }
              
              const id = Date.now().toString();
              
              // Generate larger QR code
              const qrCodeBuffer = await QRCode.toBuffer(url, {
                width: 400,  // Increase the size (default is 256)
                margin: 4,   // You can adjust this to change the white space around the QR code
                color: {
                  dark: '#000000',  // Black dots
                  light: '#ffffff'  // White background
                }
              });
              
              // Upload to S3
              await s3Client.send(new PutObjectCommand({
                Bucket: process.env.BUCKET_NAME,
                Key: `${id}.png`,
                Body: qrCodeBuffer,
                ContentType: 'image/png'
              }));
              
              // Save metadata to DynamoDB
              await ddbDocClient.send(new PutCommand({
                TableName: process.env.TABLE_NAME,
                Item: {
                  id,
                  url,
                  created_at: new Date().toISOString()
                }
              }));
              
              return {
                statusCode: 200,
                body: JSON.stringify({
                  id,
                  url,
                  qr_code_url: `https://${process.env.BUCKET_NAME}.s3.amazonaws.com/${id}.png`
                })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                body: JSON.stringify({ error: error.message })
              };
            }
          };
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Layers:
        - !Ref pQRCodeLayerArn
      Environment:
        Variables:
          BUCKET_NAME: !Ref rQRCodeBucket
          TABLE_NAME: !Ref rQRCodeMetadataTable
      Tags:
        - Key: Project-CFN
          Value: !Sub '${AWS::StackName}-stack'

  # API Gateway
  rQRCodeAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: QRCodeGenerator
      Description: API for QR Code Generation
      Tags:
        - Key: Project-CFN
          Value: !Sub '${AWS::StackName}-stack'
          
  rQRCodeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref rQRCodeAPI
      ParentId: !GetAtt rQRCodeAPI.RootResourceId
      PathPart: generate

  rQRCodeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref rQRCodeAPI
      ResourceId: !Ref rQRCodeResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rQRCodeGeneratorFunction.Arn}/invocations

  # API Gateway Deployment
  rAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: rQRCodeMethod
    Properties:
      RestApiId: !Ref rQRCodeAPI

  rAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref rAPIDeployment
      RestApiId: !Ref rQRCodeAPI
      StageName: !Ref pStageName

  # Lambda Permission
  rLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rQRCodeGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${rQRCodeAPI}/*/*/*

Outputs:

  oApiEndpoint:
    Description: API Endpoint URL
    Value: !Sub https://${rQRCodeAPI}.execute-api.${AWS::Region}.amazonaws.com/${pStageName}/generate
  
  oBucketName:
    Description: S3 Bucket Name
    Value: !Ref rQRCodeBucket
  
  oTableName:
    Description: DynamoDB Table Name
    Value: !Ref rQRCodeMetadataTable
