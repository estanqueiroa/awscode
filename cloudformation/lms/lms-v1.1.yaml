
# This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.


# https://adlnet.gov/guides/tla/service-definitions/TLA-Reference-Implementation.html#hardware-architecture
#
# v1.0 - initial deployment
# v1.1 - cfn_hup updates


AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::LanguageExtensions

Description: Deploys TLA Reference Implementation in an Amazon Web Services (AWS) virtual private cloud hosted via the ADL Initiative

Parameters:

    ResourcePrefix:
      Description: An environment name that is prefixed to resource names
      Type: String
      Default: LMS01

    SecurityGroupDescription:
      Description: SecurityGroupDescription
      Type: String
      Default: SGRP for RDS, EC2 and VPC endpoints

    VpcCIDR:
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 192.168.0.0/16
      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
      ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

    DBMasterUser:
      Type: String
      Description: Master user name
      Default: masteruser

    BackupRetention:
      Type: String
      Description: The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.
      Default: 15

    # Environment:
    #   Description: Lifecycle environment.
    #   Type: String
    #   AllowedValues:
    #     - sandbox
    #     - dev
    #     - qa
    #     - prod
    #   Default: dev

    pRDSInstance:
      Description: RDS instance size.
      Type: String
      AllowedValues:
        - db.t3.small
        - db.t3.medium
        - db.t3.large
      Default: db.t3.medium

    pRDSEngine:
      Description: RDS instance size.
      Type: String
      AllowedValues:
        - postgres
      Default: postgres

    pRDSEngineVersion:
      Description: RDS engine version.
      Type: String
      AllowedValues:
        - "15.3"
      Default: "15.3"

    pInstanceSize:
      Description: EC2 instance size.
      Type: String
      AllowedValues:
        - t3.small
        - t3.medium
        - t3.large
        - t3.xlarge
      Default: t3.small

    pInstanceSchedulerTagKey:
      Description: Instance Scheduler Tag Key
      Type: String
      Default: InstanceScheduler

    pInstanceSchedulerTagValue:
      Description: Instance Scheduler Tag Value
      Type: String
      Default: BusinessHours     



###############
# Metadata
###############

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: EC2 Configurations
        Parameters:
          - pInstanceSize
          - pInstanceSchedulerTagKey
          - pInstanceSchedulerTagValue
      - Label:
          default: VPC
        Parameters:
          - ResourcePrefix
          - VpcCIDR
          - SecurityGroupDescription
      - Label:
          default: RDS
        Parameters:
          - DBMasterUser
          - BackupRetention
          - pRDSInstance
          - pRDSEngine
          - pRDSEngineVersion


###########
# Mappings
###########

Mappings:
  RegionMap:
    us-east-1:
      CentOS7x8664EBSHVM: ami-088f16c57ce74d90e
      AmazonLinux2Kernel510: ami-0f409bae3775dc8e5
      Ubuntu2204LTS: ami-0fc5d935ebf8bc3bc
    us-east-2:
      CentOS7x8664EBSHVM: ami-033adaf0b583374d4
      AmazonLinux2Kernel510: ami-09f85f3aaae282910
      Ubuntu2204LTS: ami-0e83be366243f524a
    us-west-2:
      CentOS7x8664EBSHVM: ami-040f9e8ab2841a9b3
      AmazonLinux2Kernel510: ami-002c2b8d1f5b1eb47
      Ubuntu2204LTS: ami-008fe2fc65df48dac
  # InstanceMap:
  #   sandbox:
  #     InstanceSize: t3.small
  #   dev:
  #     InstanceSize: t3.medium
  #   qa:
  #     InstanceSize: t3.large
  #   prod:
  #     InstanceSize: t3.xlarge


#############
# Resources
#############

Resources:


#### create VPC ####


    VPC:
      Type: AWS::EC2::VPC
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W60
              reason: "Not Required for PoC"
      Properties:
        CidrBlock: !Ref VpcCIDR
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref ResourcePrefix

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Sub igw-${ResourcePrefix}

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
        
    NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: !Sub eip-${ResourcePrefix}-001
          - Key: IsUsedForDeploy
            Value: "True"

    NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: Name
            Value: !Sub ngw-${ResourcePrefix}-001
          - Key: IsUsedForDeploy
            Value: "True"

    ## Create private subnet and route table

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs  '' ]
        CidrBlock: !Select
          - 0
          - !Cidr
            - !GetAtt VPC.CidrBlock
            - 8
            - 5
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub snet-${ResourcePrefix}-priv001


    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub ${ResourcePrefix} Private Routes (AZ1)

    DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      #DependsOn: TGWAttachment
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway1

    RTAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnet1

## Create private subnet and associate to route table

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs  '' ]
        CidrBlock: !Select
          - 1
          - !Cidr
            - !GetAtt VPC.CidrBlock
            - 8
            - 5
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: !Sub snet-${ResourcePrefix}-priv002

    RTAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnet2


  ##PublicRoutes and Subnet -->>>

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W33
              reason: "subnet for public access purposes" 
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [0, !GetAZs ""]
        CidrBlock: !Select
          - 3
          - !Cidr
            - !GetAtt VPC.CidrBlock
            - 8
            - 5
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: !Sub snet-${ResourcePrefix}-pub001
          - Key: IsUsedForDeploy
            Value: "True"


    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: !Sub rt-${ResourcePrefix}-pub
          - Key: IsUsedForDeploy
            Value: "True"

    DefaultPublicRoute1:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1


  ## -->>> Security Groups for VPC Endpoints and EC2 instances

    IngressSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W9
              reason: "Required for Central Network Solution"
            - id: W2
              reason: "Required for Central Network Solution"
            - id: W28
              reason: "Required for Central Network Solution"
            - id: W36
              reason: "Security Group for demonstrative purpose"
            - id: F1000
              reason: "Required for Central Network Solution"
      Properties:
        GroupDescription: !Sub ${SecurityGroupDescription}
        VpcId: !Ref VPC
        GroupName: !Sub sgrp-${ResourcePrefix}-${ResourcePrefix}-end
        SecurityGroupIngress:
          - FromPort: 443
            IpProtocol: tcp
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - FromPort: 22
            IpProtocol: tcp
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - FromPort: -1
            IpProtocol: icmp
            ToPort: -1
            CidrIp: !Ref VpcCIDR
          - FromPort: 5432
            IpProtocol: tcp
            ToPort: 5432
            CidrIp: 0.0.0.0/0

  ## Create VPC endpoints for SSM


    CreateVpcEndpointSSM:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcEndpointType: Interface
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref IngressSecurityGroup
        PrivateDnsEnabled: true
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
        VpcId: !Ref VPC

    CreateVpcEndpointSSMMessages:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcEndpointType: Interface
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref IngressSecurityGroup
        PrivateDnsEnabled: true
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
        VpcId: !Ref VPC

    CreateVpcEndpointEC2Messages:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcEndpointType: Interface
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref IngressSecurityGroup
        PrivateDnsEnabled: true
        ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
        VpcId: !Ref VPC


################################
# create Gateway Endpoints
################################

    CreateVpcEndpointS3:
        Type: AWS::EC2::VPCEndpoint
        Properties:
          VpcEndpointType: Gateway
          ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
          VpcId: !Ref VPC
          RouteTableIds:
          - !Ref PrivateRouteTable1
          # - !Ref PrivateRouteTable02
          # PolicyDocument:
          #         Version: 2012-10-17
          #         Statement:
          #           - Effect: Allow
          #             Principal: '*'
          #             Action:
          #               - 's3:GetObject'
          #             Resource:
          #               - 'arn:aws:s3:::*'

    CreateVpcEndpointDynamoDB:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcEndpointType: Gateway
        ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
        VpcId: !Ref VPC
        RouteTableIds:
        - !Ref PrivateRouteTable1
        # - !Ref PrivateRouteTable02
        # PolicyDocument:
        #         Version: 2012-10-17
        #         Statement:
        #           - Effect: Allow
        #             Principal: '*'
        #             Action:
        #               - 'dynamodb:DescribeTable'
        #               - 'dynamodb:GetItem'
        #               - 'dynamodb:PutItem'
        #             Resource:
        #               - 'arn:aws:dynamodb:::*'


    ## Launch IAM Role for EC2 instances


    SSMIAMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: /
        Roles:
          - !Ref SSMIAMRole

#########################
# Parameter store for EC2 user data - NOT USED - remove comment if required
#########################

    # EC2UserDataParameter:
    #   Type: AWS::SSM::Parameter
    #   Properties:
    #     Name: "/my/ec2/userdata"
    #     Type: "String"
    #     Value: |
    #         #!/bin/bash
    #         sudo apt-get update -y # good practice to update existing packages
    #         sudo apt-get install -y awscli
    #         sudo apt install -y jq
    #         # Docker is a bit complicated
    #         # Add Docker's official GPG key:
    #         sudo apt-get install ca-certificates curl gnupg -y
    #         sudo install -m 0755 -d /etc/apt/keyrings
    #         curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    #         sudo chmod a+r /etc/apt/keyrings/docker.gpg
    #         # Add the repository to Apt sources:
    #         echo \
    #           "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    #           "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
    #           sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    #         sudo apt-get update
    #         sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
    #         # Add Docker Compose
    #         curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
    #         # Make sure it's executable
    #         chmod +x /usr/local/bin/docker-compose
    #     DataType: "text"
    #     Description: "EC2 user data stored in Parameter Store"
    #     Tier: "Standard"

    # MyNewEC2Instance10:  
    #   Type: AWS::EC2::Instance  
    #   Properties:
    #     IamInstanceProfile: !Ref InstanceProfile
    #     ImageId: !FindInMap 
    #       - RegionMap
    #       - !Ref 'AWS::Region'
    #       - Ubuntu2204LTS
    #     InstanceType: t2.medium
    #     SubnetId: !Ref PrivateSubnet1
    #     SecurityGroupIds: 
    #         - !Ref IngressSecurityGroup
    #     UserData:
    #       Fn::Base64: !Sub 
    #         - |
    #           #!/bin/bash
    #           ${UserDataParameter}
    #         - UserDataParameter: !GetAtt EC2UserDataParameter.Value
    #     Tags:
    #       - Key: Name
    #         Value: !Sub TEST-PARAMETER-${ResourcePrefix}

##########################################
# Create EC2 instances
##########################################

    Fn::ForEach::Instances:
      - InstanceLogicalId
      - [CoreAuth, CoreKafka, CoreRegistry, CoreLRS, CoreCASS, Moodle, MoodleContent]
      - ${InstanceLogicalId}:
          Type: AWS::EC2::Instance
          Properties:
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash -xe
                # good practice to update existing packages
                sudo apt-get update -y
                sudo apt-get install -y awscli
                sudo apt install -y jq
                # Update aws-cfn-bootstrap to the latest (cfn_hup not used in this template)
                sudo apt-get -y install python3-pip
                mkdir -p /opt/aws/
                sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
                sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
                # Docker is a bit complicated
                # Add Docker's official GPG key:
                sudo apt-get install ca-certificates curl gnupg -y
                sudo install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                sudo chmod a+r /etc/apt/keyrings/docker.gpg
                # Add the repository to Apt sources:
                echo \
                  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
                  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update
                sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
                # Add Docker Compose
                curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
                # Make sure it's executable
                chmod +x /usr/local/bin/docker-compose
            IamInstanceProfile: !Ref InstanceProfile
            ImageId: !FindInMap 
              - RegionMap
              - !Ref 'AWS::Region'
              - Ubuntu2204LTS
            SubnetId: !Ref PrivateSubnet1
            SecurityGroupIds: 
                - !Ref IngressSecurityGroup
            InstanceType: !Ref pInstanceSize
            Tags:
              - Key: Name
                Value: !Sub ${ResourcePrefix}-${InstanceLogicalId}
              - Key: !Ref pInstanceSchedulerTagKey
                Value: !Ref pInstanceSchedulerTagValue



##########################################
# Moodle DB RDS
##########################################


###########
# DB Subnet Group
###########

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      DependsOn:
        - PrivateSubnet1
        - PrivateSubnet2
      Properties: 
        DBSubnetGroupDescription: !Sub DBsubnet-${ResourcePrefix}
        DBSubnetGroupName: !Sub DBsubnet-${ResourcePrefix}
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        Tags:
          -
            Key: Name
            Value: DBSubnetGroup

###########
# RDS Instance
###########

    MyRDSInstance:
      Type: "AWS::RDS::DBInstance"
      Properties:
        MasterUsername: !Ref DBMasterUser
        DBInstanceClass: !Ref pRDSInstance
        DBInstanceIdentifier: !Sub ${ResourcePrefix}DB
        DBName: !Sub ${ResourcePrefix}DB
        Engine: !Ref pRDSEngine
        EngineVersion: !Ref pRDSEngineVersion
        AllocatedStorage: 20
        MaxAllocatedStorage: 200 # enables Storage autoscaling
        StorageType: "gp3"
        DBSubnetGroupName: !Ref DBSubnetGroup
        VPCSecurityGroups:
          - !Ref IngressSecurityGroup
        AutoMinorVersionUpgrade: false
        ManageMasterUserPassword: true
        MasterUserSecret:
          KmsKeyId: !Ref KMSKey
        BackupRetentionPeriod: !Ref BackupRetention
        CopyTagsToSnapshot: true
        Tags:
          - Key: !Ref pInstanceSchedulerTagKey
            Value: !Ref pInstanceSchedulerTagValue


###########
# KMS Key
###########
  
    KMSKey:
      Type: 'AWS::KMS::Key'
      Properties:
        Description: RDS instance KMS key
        EnableKeyRotation: True
        KeyPolicy:
          Version: "2012-10-17"
          Id: !Ref "AWS::StackName"
          Statement:
            - Sid: "Allow administration of the key"
              Effect: "Allow"
              Principal:
                AWS:
                  Fn::Sub: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
              Action:
                - "kms:*"
              Resource: "*"

