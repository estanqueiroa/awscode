# WARNING: This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# This template will implement AWS services which may have associated cost - USE AT YOUR OWN RISK :-)
#
# AWS Services to be created: DynamoDB table, SNS, Lambda, IAM role, EventBridge
#

AWSTemplateFormatVersion: "2010-09-09"

Description: "Birthday Reminder App with Email Notification on daily basis"

# input parameters

Parameters:

    SolutionName: 
      Description: The name of Automation Solution.
      Type: String
      Default: "Birthday-App-Reminder"

    EmailAddress: 
      Description: The email address for SNS topic notifications.
      Type: String
      Default: "estanqua@amazon.com"

    LambdaRoleName: 
      Description: The name of Lambda Role.
      Type: String
      Default: "role-Lambda_Birthday"

    ScheduleEvent: 
      Description: The schedule for Lambda function trigger (default run daily at 10AM)
      Type: String
      Default: "cron(0 10 * * ? *)"

    DynamoDBTable: 
      Description: The name of DynamoDB table.
      Type: String
      Default: "BirthdayApp"

    SampleRecord:
      Description: Create Sample Record in DynamoDB Table (Yes or No)?.
      Default: "Yes"
      Type: String
      AllowedValues:
        - "Yes"
        - "No"
      ConstraintDescription: must specify Yes or No.


Conditions:
  CreateSampleRecord: !Equals [!Ref SampleRecord, "Yes"]

Resources:


# Create DynamoDB table for birthday App

    myDynamoDBTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions: 
          - 
            AttributeName: "Name"
            AttributeType: "S"
          - 
            AttributeName: "BDate"
            AttributeType: "S"    # e.g 2016-02-15

        KeySchema: 
          - 
            AttributeName: "Name"
            KeyType: "HASH"
          - 
            AttributeName: "BDate"
            KeyType: "RANGE"

        BillingMode: PAY_PER_REQUEST
        TableName: !Ref DynamoDBTable
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: True
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref SolutionName

# Create new role for our lambda functions. :- Create new role named Lambda_Unused and attach below policies to it.

    LambdaRole:
      Type: 'AWS::IAM::Role'
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W28
              reason: "Required for Automation solution"
            - id: W11
              reason: "Required for Automation solution"
            - id: F3
              reason: "Required for Automation solution"
      Properties:
        RoleName: !Ref LambdaRoleName
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        Path: "/"
        Policies:
          - PolicyName: "Lambda_Birthday"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sts:AssumeRole"
                    - "logs:*"
                    - "sns:ListTopics"
                    - "sns:ListSubscriptions"
                    - "sns:ListOriginationNumbers"
                    - "sns:ListEndpointsByPlatformApplication"
                    - "sns:Publish"
                    - "sns:ListSubscriptionsByTopic"
                    - "sns:GetTopicAttributes"
                    - "sns:ListSMSSandboxPhoneNumbers"
                    - "sns:ListPlatformApplications"
                    - "dynamodb:List*"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:PutItem"
                  Resource: "*"
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref SolutionName
            

  # Create SNS Topic

    SNSTopic:
        Type: "AWS::SNS::Topic"
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: W47
                reason: "Not Required for Automation solution"
        Properties:
            DisplayName: !Ref SolutionName
            TopicName: !Ref SolutionName
            Tags: 
                - Key: "cfn-stack-name"
                  Value: !Sub ${AWS::StackName}
                - Key: cfn-stack-id
                  Value: !Sub ${AWS::StackId}
                - Key: aws-solution
                  Value: !Ref SolutionName

  # Subscribe to SNS Topic

    MySubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: !Ref EmailAddress
        Protocol: email
        TopicArn: !Ref SNSTopic

  # Create Amazon EventBridge Schedule Lambda On Daily Basis

    EventsRule:
        Type: "AWS::Events::Rule"
        Properties:
            Name: !Ref SolutionName
            Description: !Ref SolutionName
            ScheduleExpression: !Ref ScheduleEvent
            State: "ENABLED"
            Targets: 
              - 
                Arn: !GetAtt LambdaBirthday.Arn
                Id: "Idd123456"
            EventBusName: "default"


    PermissionForEventsToInvokeLambda: 
        Type: AWS::Lambda::Permission
        Properties: 
            FunctionName: !Ref SolutionName
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "EventsRule"
                    - "Arn"

  # Create Lambda Function To Scan DynamoDB table

    LambdaBirthday:
      Type: AWS::Lambda::Function
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W92
              reason: "Not Required for Automation solution"
            - id: W89
              reason: "Not Required for Automation solution"
      Properties:
        Code:
          ZipFile: |
            import os
            import boto3
            import datetime

            sns_client = boto3.client('sns')
            dynamodb = boto3.resource('dynamodb')

            def lambda_handler(event, context):
                acctID = context.invoked_function_arn.split(":")[4]
                birthdays = []                
                Target=os.environ["DB_TABLE"]
                table = dynamodb.Table(Target)
                items = table.scan()['Items']

              #  read date from system
                today = datetime.date.today()
                print("Hoje: " + str(today))

                for item in items:
                    print (item)
                    if str(today) == item['BDate']:
                        print("same")
                        day1 = item['Name']
                        birthdays.append("*** Faz aniversario hoje ***")
                        birthdays.append(day1)
                    else:   
                        print("not same")
                        birthdays.append("Nenhum aniversario hoje")

                #email
                sns_client.publish(
                    TargetArn=os.environ["SNS_ARN"],
                    Subject='Aniversarios hoje: Conta AWS id ' + acctID,
                    Message=str(birthdays)
                )
                return "success"
        FunctionName: !Ref SolutionName
        Handler: "index.lambda_handler"
        Timeout: 30
        Role: !GetAtt "LambdaRole.Arn"
        Runtime: python3.9
        Environment: 
            Variables:
                SNS_ARN: !Ref SNSTopic
                DB_TABLE: !Ref DynamoDBTable
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref SolutionName

# Create Lambda Function To inject sample record into DynamoDB table

    LambdaSample:
      Type: AWS::Lambda::Function
      Condition: CreateSampleRecord
      DependsOn: myDynamoDBTable
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W92
              reason: "Not Required for Automation solution"
            - id: W89
              reason: "Not Required for Automation solution"
      Properties:
        Code:
          ZipFile: |
            import json
            import boto3
            import os
            import cfnresponse

            #function definition
            def lambda_handler(event,context):
                  responseData = {}
                  dynamodb = boto3.resource('dynamodb')
                  #table name
                  Target=os.environ["DB_TABLE"]
                  table = dynamodb.Table(Target)
                  #inserting values into table
                  response = table.put_item(
                      Item={
                          'Name': 'TestRecord',
                          'BDate': '2023-02-24'
                          
                      }
                  )

                  print("Sending CFN")
                  responseStatus = 'SUCCESS'
                  responseData = {'Success': 'Check Logs.'}
                  
                  cfnresponse.send(event, context, responseStatus, responseData)
                  

        FunctionName: !Sub "${SolutionName}-sample-record"
        Handler: "index.lambda_handler"
        Timeout: 30
        Role: !GetAtt "LambdaRole.Arn"
        Runtime: python3.9
        Environment: 
            Variables:
                DB_TABLE: !Ref DynamoDBTable
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref SolutionName

# Trigger Lambda to create sample record

    CustomResource:
      Type: Custom::LambdaSample
      Condition: CreateSampleRecord
      DependsOn: LambdaSample
      Properties:
        ServiceToken: !GetAtt "LambdaSample.Arn"