# WARNING: This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
#
# This template will implement AWS services which may have associated cost - USE AT YOUR OWN RISK :-)
#
# AWS Services to be created: DynamoDB table, SNS, Lambda, IAM role, EventBridge
#

AWSTemplateFormatVersion: "2010-09-09"

Description: "Birthday Reminder App with Email Notification on daily basis"

# input parameters

Parameters:

    pSolutionName: 
      Description: The name of this Automation Solution.
      Type: String
      Default: "Birthday-App-Reminder"

    pEmailAddress: 
      Description: The email address for SNS topic notifications.
      Type: String
      Default: "youremail@domain.com"

    pScheduleEvent: 
      Description: The schedule for Lambda function trigger (default run daily at 10AM GMT)
      Type: String
      Default: "cron(0 10 * * ? *)"

    pDynamoDBTable: 
      Description: The name of DynamoDB table for birthday records.
      Type: String
      Default: "BirthdayApp"

    pSampleRecord:
      Description: Create Sample Record in DynamoDB Table (Yes or No)?.
      Default: "Yes"
      Type: String
      AllowedValues:
        - "Yes"
        - "No"
      ConstraintDescription: must specify Yes or No.


Conditions:
  CreateSampleRecord: !Equals [!Ref pSampleRecord, "Yes"]

Resources:


# Create DynamoDB table for birthday App

    rDynamoDBTable: 
      Type: AWS::DynamoDB::Table
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W74
              reason: "Encryption Not Required for this PoC solution"
            - id: W28
              reason: "Explicit DB name used in Lambda function"
      Properties: 
        AttributeDefinitions: 
          - 
            AttributeName: "Name"
            AttributeType: "S"
          - 
            AttributeName: "BDate"
            AttributeType: "S"    # format year-month-day e.g "2016-02-15"

        KeySchema: 
          - 
            AttributeName: "Name"
            KeyType: "HASH"
          - 
            AttributeName: "BDate"
            KeyType: "RANGE"

        BillingMode: PAY_PER_REQUEST  #On Demand table (no provisioned capacity)
        DeletionProtectionEnabled: True
        TableName: !Ref pDynamoDBTable
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: True
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref pSolutionName

# Create new role for our lambda functions. :- Create new role and attach below policies to it.

    rLambdaRole:
      Type: 'AWS::IAM::Role'
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W28
              reason: "Required for Automation solution"
            - id: W11
              reason: "Required for Automation solution"
            - id: F3
              reason: "Required for Automation solution"
      Properties:
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        Path: "/"
        Policies:
          - PolicyName: "Lambda_Birthday"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Sid: AllowOperationsOnServices
                  Action:
                    - "sts:AssumeRole"
                    - "logs:*"
                  Resource: "*"
                - Effect: Allow
                  Sid: AllowSNStopic
                  Action:
                    - "sns:List*"
                    - "sns:Publish"
                    - "sns:Get*"
                  Resource: !Sub ${rSNSTopic}
                - Effect: Allow
                  Sid: AllowGetOperationsOnDynamoDBTable
                  Action:
                    - "dynamodb:List*"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:PutItem"
                  Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${rDynamoDBTable}
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref pSolutionName
            

# Create SNS Topic to send notifications

    rSNSTopic:
        Type: "AWS::SNS::Topic"
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: W47
                reason: "Not Required for Automation solution"
        Properties:
            DisplayName: !Ref pSolutionName
            TopicName: !Ref pSolutionName
            Tags: 
                - Key: "cfn-stack-name"
                  Value: !Sub ${AWS::StackName}
                - Key: cfn-stack-id
                  Value: !Sub ${AWS::StackId}
                - Key: aws-solution
                  Value: !Ref pSolutionName

# Subscribe to SNS Topic to receive notifications

    rMySubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: !Ref pEmailAddress
        Protocol: email
        TopicArn: !Ref rSNSTopic

# Create Amazon EventBridge Schedule Lambda On Daily Basis

    rEventsRule:
        Type: "AWS::Events::Rule"
        Properties:
            Name: !Ref pSolutionName
            Description: !Ref pSolutionName
            ScheduleExpression: !Ref pScheduleEvent
            State: "ENABLED"
            Targets: 
              - 
                Arn: !GetAtt rLambdaBirthday.Arn
                Id: "Idd12345678"
            EventBusName: "default"


    rPermissionForEventsToInvokeLambda: 
        Type: AWS::Lambda::Permission
        Properties: 
            FunctionName: !Ref pSolutionName
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "rEventsRule"
                    - "Arn"

# Create Lambda Function To Scan DynamoDB table records and send SNS notifications

    rLambdaBirthday:
      Type: AWS::Lambda::Function
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W92
              reason: "Not Required for Automation solution"
            - id: W89
              reason: "Not Required for Automation solution"
      Properties:
        Code:
          ZipFile: |
            import os
            import boto3
            import datetime

            # Initialize boto3
            dynamodb = boto3.resource('dynamodb')


            # scan DynamoDB table records

            def check_birthdays(db_items):
                """
                Checks a list of birthday records and returns a list of birthday information.
                
                Args:
                    db_items (list): A list of birthday records, where each record is a dictionary with 'BDate' and 'Name' keys.
                    
                Returns:
                    list: A list of birthday information, where each item is a string with the birthday details.
                """
                today = datetime.date.today()
                today_month_day = str(today)[5:]
                
                birthdays = []
                
                birthdays.append(f"Checking today: {today}")
                        
                for item in db_items:
                    bday = str(item['BDate'])[5:]
                    birth_year = int(item['BDate'][:4])
                    age = today.year - birth_year
                    
                    if bday == today_month_day:
                        birthdays.append(f"*** Happy birthday ðŸŽ‰ ðŸ˜Š, {item['Name']}! ***")
                        birthdays.append(f"Age: {age} years")
                
                return birthdays
            
            # send SNS notifications

            def send_sns_notification(account_id, birthdays):
                """
                Sends an SNS notification with the birthday information.
                
                Args:
                    account_id (str): The AWS account ID.
                    birthdays (list): A list of birthday information strings.
                    
                Returns:
                    str: 'Success' if the notification was sent successfully, 'Failure' otherwise.
                """
                sns_client = boto3.client('sns')
                
                try:
                    # Determine the subject and message based on the number of birthdays
                    birthday_count = len(birthdays) // 2
                    if birthday_count > 0:
                        subject = f"Found {birthday_count} birthday(s) today: Account AWS ID {account_id}"
                        message = "\n".join(birthdays)
                    else:
                        subject = f"No birthday today: Account AWS ID {account_id}"
                        message = "No birthdays today ðŸ˜¢ " + str(birthdays)
                    
                    # Send the SNS notification
                    sns_client.publish(
                        TargetArn=os.environ["SNS_ARN"],
                        Subject=subject,
                        Message=message
                    )
                    
                    return ("Process Successfully - " + subject)
                
                except Exception as e:
                    print(f"Failed to send SNS notification: {e}")
                    return "Failure"

            def lambda_handler(event, context):
                try:
                    # Read AWS Account ID
                    account_id = context.invoked_function_arn.split(":")[4]

                    # Read environment variables and scan DynamoDB table
                    table_name = os.environ["DB_TABLE"]
                    table = dynamodb.Table(table_name)
                    items = table.scan()['Items']

                    # Check for birthdays
                    birthdays = check_birthdays(items)

                    # Send SNS notification
                    result = send_sns_notification(account_id, birthdays)

                    return result

                except Exception as e:
                    print('Failed to process:', e)
                    return "Failure: Check Logs."

        FunctionName: !Ref pSolutionName
        Handler: "index.lambda_handler"
        Timeout: 30
        Architectures:
        - arm64   # Arm-based AWS Graviton2 processors
        Role: !GetAtt "rLambdaRole.Arn"
        Runtime: python3.12
        Environment: 
            Variables:
                SNS_ARN: !Ref rSNSTopic
                DB_TABLE: !Ref pDynamoDBTable
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref pSolutionName

# Create Lambda Function To inject sample record into DynamoDB table

    rLambdaSample:
      Type: AWS::Lambda::Function
      Condition: CreateSampleRecord
      DependsOn: rDynamoDBTable
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W92
              reason: "Not Required for Automation solution"
            - id: W89
              reason: "Not Required for Automation solution"
      Properties:
        Code:
          ZipFile: |
            #!/usr/bin/env python3
            import json
            import boto3
            import os
            import cfnresponse

            #Create sample record into DynamoDB table
            def lambda_handler(event,context):

              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}

              print(f"Event: {event}")

              # Get the request type (CREATE, UPDATE, DELETE)
              request_type = event['RequestType']

              status = cfnresponse.SUCCESS
              
              # Handle the request type

              if request_type == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID') 

              if request_type == 'Create' or request_type == 'Update':
                  try:
                      dynamodb = boto3.resource('dynamodb')
                      #table name
                      Target=os.environ["DB_TABLE"]
                      table = dynamodb.Table(Target)
                      #inserting values into table
                      response = table.put_item(
                          Item={
                              'Name': 'SampleRecord',
                              'BDate': '2023-02-24'
                              
                          }
                      )
                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {'Error': traceback.format_exc(e)}
                  finally:
                      #send event validation to CFN custom resource
                      print("Sending CFN")
                      responseStatus = 'SUCCESS'
                      responseData = {'Success': 'Check Logs.'}
                      cfnresponse.send(event, context, responseStatus, responseData)
                  

        FunctionName: !Sub "${pSolutionName}-sample-record"
        Handler: "index.lambda_handler"
        Timeout: 30
        Role: !GetAtt "rLambdaRole.Arn"
        Runtime: python3.12
        Environment: 
            Variables:
                DB_TABLE: !Ref pDynamoDBTable
        Tags: 
            - Key: "cfn-stack-name"
              Value: !Sub ${AWS::StackName}
            - Key: cfn-stack-id
              Value: !Sub ${AWS::StackId}
            - Key: aws-solution
              Value: !Ref pSolutionName

# Trigger Lambda to create sample record

    CustomResource:
      Type: Custom::LambdaSample
      Condition: CreateSampleRecord
      DependsOn: rLambdaSample
      Properties:
        ServiceToken: !GetAtt "rLambdaSample.Arn"
        ServiceTimeout: 60 # seconds