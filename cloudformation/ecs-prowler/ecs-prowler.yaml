###############################################################
# WARNING: This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
###############################################################
# AWS security best practices assessments using Prowler
#
# https://aakibkhan1.medium.com/aws-security-best-practices-assessments-using-prowler-f561aed83828
#
# https://simulationcyber.com/automating-aws-prowler-scans/
#
# https://docs.prowler.com/projects/prowler-open-source/en/latest/
#
# This CloudFormation template will:
#
# Run Prowler in a Fargate task
# Save the results to an S3 bucket
# Log the output to CloudWatch Logs
#
###############################################################

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Using Docker image to Run Prowler security scan tool as ECS Cluster scheduled task and export results to S3 bucket'

Parameters:

  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  pSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two public subnets in the selected VPC.

  pImageRepositoryName:
    Type: String
    Default: 'prowler-tool-ecr'
    Description: 'Name for the ECR repository'

  pDockerImage:
    Type: String
    Default: public
    Description: Select public or private Docker Image repo (private will create ECR repo and CodeBuild to deploy Docker image)
    AllowedValues:
      - public
      - private

  README:
    Type: String
    Default: Run CodeBuild project using Console if you choose option PRIVATE, otherwise ECS task will FAIL
    Description: Run CodeBuild project using Console if you choose option PRIVATE, otherwise ECS task will FAIL

Conditions: # defines if Docker image is built and pushed to private ECR repository or use public ECR Docker image
  IsPrivate: !Equals 
    - !Ref pDockerImage
    - private

Resources:
  rECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ProwlerCluster
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  rProwlerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: prowler-task
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref rExecutionRole
      TaskRoleArn: !Ref rTaskRole
      ContainerDefinitions:
        - Name: prowler-container
          Essential: true
          Image: !If
            - IsPrivate
            - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pImageRepositoryName}:latest
            - public.ecr.aws/prowler-cloud/prowler:latest
          # EntryPoint:
          #   - sh
          #   - -c
          Command:
            # AWS services checking
            - -s
            - s3
            - ec2
            - kms
            - eks
            - rds
            # filter region
            - -f
            - !Sub ${AWS::Region}
            # export output to bucket
            - -B
            - !Ref rS3ResultsBucket
          # Environment:
          #   - Name: RESULTS_BUCKET
          #     Value: !Ref rS3ResultsBucket
          #   - Name: AWS_REGION
          #     Value: !Sub ${AWS::Region}
          # PortMappings:
          #   - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref rCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  rExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  rTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: ProwlerS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:GetBucketLocation
                  - s3:GetBucketLogging
                  - s3:GetBucketVersioning
                  - s3:GetBucketWebsite
                  - s3:GetBucketEncryption
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${rS3ResultsBucket}
                  - !Sub arn:aws:s3:::${rS3ResultsBucket}/*
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  rCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/prowler-logs
      RetentionInDays: 14
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  rScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Prowler ScheduledRule"
      ScheduleExpression: "cron(0 1 * * ? *)" # run once a day
      #ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt rECSCluster.Arn
          RoleArn: !GetAtt rEventsRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref rProwlerTaskDefinition
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                Subnets: 
                  !Ref pSubnetIds
                # SecurityGroups:
                #   - !GetAtt ContainerSecurityGroup.GroupId
                AssignPublicIp: ENABLED
          Id: "TargetFargateTask"
          #Input: !Sub '{"containerOverrides": [{"name": "prowler-container", "environment": [{"name": "RESULTS_BUCKET", "value": "${rS3ResultsBucket}"}]}]}'

  rEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowECSTaskExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ecs:RunTask
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  rS3ResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      #BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AutoDeleteOldResults
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  rBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rS3ResultsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: 
              - !Sub '${rS3ResultsBucket.Arn}/*'
              - !GetAtt rS3ResultsBucket.Arn
            Condition:
              Bool:
                'aws:SecureTransport': false

#############################
# CodeBuild to create Docker Image
#############################

  # ECR Repository
  rECRRepository:
    Type: AWS::ECR::Repository
    Condition: IsPrivate
    Properties:
      RepositoryName: !Ref pImageRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  # CodeBuild Role
  rCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Condition: IsPrivate
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource: !GetAtt rECRRepository.Arn
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*' # required * resource 
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-docker-build
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-docker-build:*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-trigger
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-trigger:*
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: '*'
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation

  # CodeBuild Project
  rCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Condition: IsPrivate
    Properties:
      Name: !Sub ${AWS::StackName}-docker-build
      ServiceRole: !GetAtt rCodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pImageRepositoryName}
          - Name: AWS_REGION
            Value: !Sub ${AWS::Region}
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            build:
              commands:
                - echo "Creating Dockerfile..."
                - |
                  cat << EOF > Dockerfile
                  FROM public.ecr.aws/amazonlinux/amazonlinux:latest
                  
                  # RUN - removed
                  # yum install -y python3-pip curl unzip git && \
                  # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
                  # unzip awscliv2.zip && \
                  # ./aws/install && \

                  RUN yum update -y && \
                      yum install -y python3-pip && \
                      pip3 install setuptools ansi2html && \
                      pip3 install prowler && \
                      prowler -v && \
                      yum clean all && \
                      rm -rf /var/cache/yum && \
                      rm -rf awscliv2.zip ./aws

                  ENTRYPOINT ["prowler"]
                  EOF
                - docker build -t $ECR_REPOSITORY_URI:latest .
            post_build:
              commands:
                - docker push $ECR_REPOSITORY_URI:latest
      Cache:
        Type: NO_CACHE
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: IAC
          Value: RAIN-CloudFormation


Outputs:

  oTaskDefinitionArn:
    Description: ARN of the Prowler Task Definition
    Value: !Ref rProwlerTaskDefinition


  oBucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref rS3ResultsBucket

  oBucketARN:
    Description: 'ARN of the created S3 bucket'
    Value: !GetAtt rS3ResultsBucket.Arn

  oECRRepositoryURI:
    Condition: IsPrivate
    Description: 'ECR Repository URI'
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pImageRepositoryName}

  oCodeBuildProjectName:
    Condition: IsPrivate
    Description: 'CodeBuild Project Name'
    Value: !Ref rCodeBuildProject
