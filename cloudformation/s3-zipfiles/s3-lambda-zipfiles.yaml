################################
#
#
# Reference: https://medium.com/@darrenroback/how-to-process-and-extract-zip-files-with-aws-lambda-ed2a59f6b746
#
#
################################


AWSTemplateFormatVersion: '2010-09-09'
Description: S3 Bucket with Lambda Trigger to Process Uploaded Zip Files

Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .zip

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: arn:aws:s3:::* # this avoids circular dependency
                #   - !GetAtt S3Bucket.Arn
                #   - !Join ['', [!GetAtt S3Bucket.Arn, '/*']]

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      Timeout: 600
      MemorySize: 512
      EphemeralStorage: 
        Size: 3072
      Architectures:
        - arm64 # AWS Graviton
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          # Import statements
          import boto3
          import zipfile 
          from datetime import * 
          import os
          import logging
          import sys
          import traceback
          import json

          # Set logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Create boto3 session
          session = boto3.Session()

          # Create S3 client object
          s3_client = session.client('s3') 

          # Create S3 resource
          s3_resource = boto3.resource('s3')

          # Set temp file path
          tmp_file_path = '/tmp/file.zip'

          # Set unzipped output path
          unzip_path = 'unzipped/'

          # Download file function
          def download_file(bucket, key):
              
              # Create S3 resource object
              s3_object = s3_resource.Object(bucket, key)

              # Download file to /tmp
              try:
                  logger.info("Downloading file to /tmp...")
                  s3_object.download_file(tmp_file_path)
                  logger.info("Download complete.")
              except Exception as e:
                  exception_type, exception_value, exception_traceback = sys.exc_info()
                  traceback_string = traceback.format_exception(exception_type, exception_value, exception_traceback)
                  err_msg = json.dumps({
                      "errorType": exception_type.__name__,
                      "errorMessage": str(exception_value),
                      "stackTrace": traceback_string
                  })
                  logger.error(err_msg)
                  
              # List zipped contents of /tmp
              logger.info("Zipped contents of /tmp directory:")
              for file in os.listdir("/tmp"):
                  logger.info(os.path.join(f"/tmp{file}"))

          # Unzip file function
          def unzip_file(bucket, key): 

              # Create zipfile object
              zip = zipfile.ZipFile(tmp_file_path)
              
              # Extract zipped files to /tmp
              logger.info("Extracting files to /tmp...")
              zip.extractall('/tmp') 

              # List contents of /tmp
              logger.info("Extracted contents of /tmp directory:")
              for file in os.listdir("/tmp"):
                  
                  # List file paths
                  logger.info(os.path.join(f"/tmp{file}"))
                  
                  # List file sizes
                  logger.info(f"File size: {os.path.getsize(os.path.join('/tmp', file))} bytes")
            
              # Process each file within the zip 
              for filename in zip.namelist(): 

                  # Set zip file info
                  file_info = zip.getinfo(filename) 
                  logger.info(f"Zip file info: {file_info}")  

                  # Copy the files to the 'unzipped' S3 folder 
                  logger.info(f"Uploading file {filename} to {bucket}/{unzip_path}{filename}") 
                  
                  # Upload file to S3
                  with zip.open(filename) as f:
                      try:
                          response = s3_client.upload_fileobj(
                          Fileobj=f, 
                          Bucket=bucket,
                          Key=f'{unzip_path}{filename}'
                          )
                      except Exception as e:
                          exception_type, exception_value, exception_traceback = sys.exc_info()
                          traceback_string = traceback.format_exception(exception_type, exception_value, exception_traceback)
                          err_msg = json.dumps({
                              "errorType": exception_type.__name__,
                              "errorMessage": str(exception_value),
                              "stackTrace": traceback_string
                          })
                          logger.error(err_msg)
              
                  # Delete the file from /tmp
                  logger.info(f"Deleting file {filename} from /tmp...")
                  os.remove(os.path.join('/tmp', filename))

              # Delete the zip file from /tmp
              logger.info("Deleting zip file from /tmp...")
              os.remove(tmp_file_path)

          # Main Lambda function
          def lambda_handler(event, context):

            # Process each object in the S3 event 
            for record in event['Records']:

              # Extract bucket and key
              bucket = record['s3']['bucket']['name'] 
              key = record['s3']['object']['key']

              # Logging
              logger.info(f"Received bucket: {bucket}")
              logger.info(f"Received key: {key}")

              # Call functions to download and unzip file
              try:
                download_file(bucket, key)  
                unzip_file(bucket, key)
              except Exception as e:
                  exception_type, exception_value, exception_traceback = sys.exc_info()
                  traceback_string = traceback.format_exception(exception_type, exception_value, exception_traceback)
                  err_msg = json.dumps({
                      "errorType": exception_type.__name__,
                      "errorMessage": str(exception_value),
                      "stackTrace": traceback_string
                  })
                  logger.error(err_msg)

  S3Trigger:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt S3Bucket.Arn

