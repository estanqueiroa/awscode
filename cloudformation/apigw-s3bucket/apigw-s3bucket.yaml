######################################################################################
# WARNING: This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.
######################################################################################
#
# This template will implement AWS services which may have associated cost - USE AT YOUR OWN RISK :-)
#
# References:
#
# https://awstip.com/uploading-files-to-s3-through-api-gateway-7bb78c0d0483
#
# https://repost.aws/knowledge-center/api-gateway-upload-image-s3

AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway with S3 integration for binary file upload/download'

# Parameters:

#   pBucketName:
#     Type: String
#     Description: Name of the S3 bucket

#   pApiName:
#     Type: String
#     Description: Name of the API Gateway API

Resources:
  # S3 Bucket
  rS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AWS::StackName}-${AWS::AccountId}'
      Tags:
        - Key: Solution
          Value: !Sub '${AWS::StackName}-serverless'

  # API Gateway Role
  rApiGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource: !Sub '${rS3Bucket.Arn}/*'
      Tags:
        - Key: Solution
          Value: !Sub '${AWS::StackName}-serverless'

  # API Gateway
  rRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${AWS::StackName}'
      Description: 'Upload files to S3'
      BinaryMediaTypes:
        - '*/*' # all file types
      Tags:
        - Key: Solution
          Value: !Sub '${AWS::StackName}-serverless'

  # Folder Resource
  rFolderResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref rRestApi
      ParentId: !GetAtt rRestApi.RootResourceId
      PathPart: '{folder}'

  # Object Resource
  rObjectResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref rRestApi
      ParentId: !Ref rFolderResource
      PathPart: '{object}'

  # PUT Method
  rPutMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref rRestApi
      ResourceId: !Ref rObjectResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt rApiGatewayRole.Arn
        IntegrationHttpMethod: PUT
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}'
        RequestParameters:
          integration.request.path.bucket: 'method.request.path.folder'
          integration.request.path.key: 'method.request.path.object'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: '200'
      RequestParameters:
        method.request.path.folder: true
        method.request.path.object: true
      MethodResponses:
        - StatusCode: '200'

  # GET Method
  rGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref rRestApi
      ResourceId: !Ref rObjectResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt rApiGatewayRole.Arn
        IntegrationHttpMethod: GET
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}'
        RequestParameters:
          integration.request.path.bucket: 'method.request.path.folder'
          integration.request.path.key: 'method.request.path.object'
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Content-Type: 'integration.response.header.Content-Type'
      RequestParameters:
        method.request.path.folder: true
        method.request.path.object: true
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Content-Type: true

  # Deployment
  rApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - rPutMethod
      - rGetMethod
    Properties:
      RestApiId: !Ref rRestApi

  # Stage
  rApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref rApiDeployment
      RestApiId: !Ref rRestApi
      StageName: 'prod'

Outputs:

  oApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${rRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
  
  oBucketName:
    Description: 'Name of the created S3 bucket'
    Value: !Ref rS3Bucket
